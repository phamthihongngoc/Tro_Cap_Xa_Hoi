import Database from 'better-sqlite3';
import bcrypt from 'bcryptjs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new Database(dbPath);

console.log('üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu m·∫´u...\n');

// Clear existing data (optional - comment out if you want to keep old data)
console.log('üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...');
const tables = [
  'complaint_responses', 'complaints', 'notifications', 
  'user_activity_log', 'payout_items', 'payouts',
  'application_documents', 'application_history', 'applications',
  'household_members', 'households', 'support_programs', 'users'
];

tables.forEach(table => {
  try {
    db.exec(`DELETE FROM ${table}`);
  } catch (err) {
    // Table might not exist, skip it
  }
});
console.log('  ‚úì ƒê√£ x√≥a d·ªØ li·ªáu c≈©\n');

// Helper function to insert data
function insertData(table, data) {
  const columns = Object.keys(data).join(', ');
  const placeholders = Object.keys(data).map(() => '?').join(', ');
  const values = Object.values(data);
  
  const stmt = db.prepare(`INSERT INTO ${table} (${columns}) VALUES (${placeholders})`);
  return stmt.run(...values).lastInsertRowid;
}

// 1. Seed Users
console.log('üë• T·∫°o users...');
const hashedPassword = bcrypt.hashSync('123456', 10);

const users = [
  { full_name: 'Nguy·ªÖn VƒÉn A', email: 'citizen1@example.com', phone: '0901234567', address: 'Th√¥n 1, X√£ Ho√†ng ƒê·ªìng', password_hash: hashedPassword, role: 'CITIZEN', status: 'active' },
  { full_name: 'Tr·∫ßn Th·ªã B', email: 'citizen2@example.com', phone: '0902234567', address: 'Th√¥n 2, X√£ Ho√†ng ƒê·ªìng', password_hash: hashedPassword, role: 'CITIZEN', status: 'active' },
  { full_name: 'L√™ VƒÉn C', email: 'citizen3@example.com', phone: '0903234567', address: 'Th√¥n 3, X√£ T√¢n Ph√∫', password_hash: hashedPassword, role: 'CITIZEN', status: 'active' },
  { full_name: 'Ph·∫°m Th·ªã D', email: 'citizen4@example.com', phone: '0904234567', address: 'Th√¥n 1, X√£ T√¢n Ph√∫', password_hash: hashedPassword, role: 'CITIZEN', status: 'active' },
  { full_name: 'Ho√†ng VƒÉn E', email: 'citizen5@example.com', phone: '0905234567', address: 'Th√¥n 4, X√£ Ho√†ng ƒê·ªìng', password_hash: hashedPassword, role: 'CITIZEN', status: 'active' },
  
  { full_name: 'C√°n b·ªô Tr·∫ßn Minh', email: 'officer1@langson.gov.vn', phone: '0911234567', address: 'UBND X√£ Ho√†ng ƒê·ªìng', password_hash: hashedPassword, role: 'OFFICER', status: 'active' },
  { full_name: 'C√°n b·ªô L√™ H∆∞∆°ng', email: 'officer2@langson.gov.vn', phone: '0912234567', address: 'UBND X√£ T√¢n Ph√∫', password_hash: hashedPassword, role: 'OFFICER', status: 'active' },
  
  { full_name: 'Qu·∫£n tr·ªã vi√™n H·ªá th·ªëng', email: 'admin@langson.gov.vn', phone: '0920234567', address: 'UBND T·ªânh L·∫°ng S∆°n', password_hash: hashedPassword, role: 'ADMIN', status: 'active' },
];

const userIds = [];
users.forEach(user => {
  const id = insertData('users', user);
  userIds.push(id);
  console.log(`  ‚úì T·∫°o user: ${user.full_name} (${user.role})`);
});

// 2. Seed Support Programs
console.log('\nüìã T·∫°o ch∆∞∆°ng tr√¨nh h·ªó tr·ª£...');
const programs = [
  { code: 'TC001', name: 'Tr·ª£ c·∫•p ng∆∞·ªùi khuy·∫øt t·∫≠t', description: 'H·ªó tr·ª£ sinh ho·∫°t ph√≠ cho ng∆∞·ªùi khuy·∫øt t·∫≠t', type: 'Khuy·∫øt t·∫≠t', amount: 540000, start_date: '2024-01-01', end_date: '2024-12-31', status: 'active', created_by: userIds[7] },
  { code: 'TC002', name: 'Tr·ª£ c·∫•p h·ªô ngh√®o', description: 'H·ªó tr·ª£ sinh ho·∫°t ph√≠ cho h·ªô ngh√®o', type: 'H·ªô ngh√®o', amount: 350000, start_date: '2024-01-01', end_date: '2024-12-31', status: 'active', created_by: userIds[7] },
  { code: 'TC003', name: 'Tr·ª£ c·∫•p tr·∫ª m·ªì c√¥i', description: 'Nu√¥i d∆∞·ª°ng tr·∫ª em m·ªì c√¥i d∆∞·ªõi 16 tu·ªïi', type: 'Tr·∫ª em', amount: 600000, start_date: '2024-01-01', end_date: '2024-12-31', status: 'active', created_by: userIds[7] },
  { code: 'TC004', name: 'H·ªó tr·ª£ ng∆∞·ªùi cao tu·ªïi', description: 'Tr·ª£ c·∫•p cho ng∆∞·ªùi tr√™n 80 tu·ªïi', type: 'Ng∆∞·ªùi cao tu·ªïi', amount: 450000, start_date: '2024-01-01', end_date: '2024-12-31', status: 'active', created_by: userIds[7] },
  { code: 'TC005', name: 'H·ªó tr·ª£ h·ªçc sinh ngh√®o', description: 'H·ªçc b·ªïng cho h·ªçc sinh ngh√®o v∆∞·ª£t kh√≥', type: 'Gi√°o d·ª•c', amount: 500000, start_date: '2024-09-01', end_date: '2025-06-30', status: 'active', created_by: userIds[7] },
];

const programIds = [];
programs.forEach(program => {
  const id = insertData('support_programs', program);
  programIds.push(id);
  console.log(`  ‚úì T·∫°o ch∆∞∆°ng tr√¨nh: ${program.name}`);
});

// 3. Seed Applications
console.log('\nüìù T·∫°o h·ªì s∆° xin h·ªó tr·ª£...');
const applications = [
  { code: 'APP00001', user_id: userIds[0], program_id: programIds[0], citizen_id: '123456789001', full_name: 'Nguy·ªÖn VƒÉn A', date_of_birth: '1985-03-15', gender: 'Nam', phone: '0901234567', email: 'citizen1@example.com', address: 'Th√¥n 1, X√£ Ho√†ng ƒê·ªìng', district: 'Dinh L·∫≠p', commune: 'Ho√†ng ƒê·ªìng', village: 'Th√¥n 1', household_members_data: JSON.stringify([{name: 'Nguy·ªÖn VƒÉn A', relationship: 'Ch·ªß h·ªô', yearOfBirth: 1985}]), application_type: 'Ng∆∞·ªùi khuy·∫øt t·∫≠t', support_amount: 540000, status: 'approved', submitted_at: '2024-11-15', approved_at: '2024-11-20', notes: 'ƒê√£ x√°c minh' },
  
  { code: 'APP00002', user_id: userIds[1], program_id: programIds[1], citizen_id: '123456789002', full_name: 'Tr·∫ßn Th·ªã B', date_of_birth: '1990-07-20', gender: 'N·ªØ', phone: '0902234567', email: 'citizen2@example.com', address: 'Th√¥n 2, X√£ Ho√†ng ƒê·ªìng', district: 'Dinh L·∫≠p', commune: 'Ho√†ng ƒê·ªìng', village: 'Th√¥n 2', household_members_data: JSON.stringify([{name: 'Tr·∫ßn Th·ªã B', relationship: 'Ch·ªß h·ªô', yearOfBirth: 1990}, {name: 'Tr·∫ßn VƒÉn F', relationship: 'Con', yearOfBirth: 2015}]), application_type: 'H·ªô ngh√®o', support_amount: 350000, status: 'approved', submitted_at: '2024-11-10', approved_at: '2024-11-18', notes: 'H·ªô ngh√®o c·∫≠n ngh√®o' },
  
  { code: 'APP00003', user_id: userIds[2], program_id: programIds[2], citizen_id: '123456789003', full_name: 'L√™ VƒÉn C', date_of_birth: '1995-01-10', gender: 'Nam', phone: '0903234567', email: 'citizen3@example.com', address: 'Th√¥n 3, X√£ T√¢n Ph√∫', district: 'Dinh L·∫≠p', commune: 'T√¢n Ph√∫', village: 'Th√¥n 3', household_members_data: JSON.stringify([{name: 'L√™ Th·ªã G', relationship: 'Con', yearOfBirth: 2010}]), application_type: 'Tr·∫ª m·ªì c√¥i', support_amount: 600000, status: 'under_review', submitted_at: '2024-12-01', reviewed_at: '2024-12-05', notes: 'ƒêang x√°c minh gi·∫•y t·ªù' },
  
  { code: 'APP00004', user_id: userIds[3], program_id: programIds[3], citizen_id: '123456789004', full_name: 'Ph·∫°m Th·ªã D', date_of_birth: '1940-05-15', gender: 'N·ªØ', phone: '0904234567', email: 'citizen4@example.com', address: 'Th√¥n 1, X√£ T√¢n Ph√∫', district: 'Dinh L·∫≠p', commune: 'T√¢n Ph√∫', village: 'Th√¥n 1', household_members_data: JSON.stringify([{name: 'Ph·∫°m Th·ªã D', relationship: 'Ch·ªß h·ªô', yearOfBirth: 1940}]), application_type: 'Ng∆∞·ªùi cao tu·ªïi', support_amount: 450000, status: 'approved', submitted_at: '2024-10-01', approved_at: '2024-10-10', notes: 'Ng∆∞·ªùi cao tu·ªïi ƒë∆°n th√¢n' },
  
  { code: 'APP00005', user_id: userIds[4], program_id: programIds[4], citizen_id: '123456789005', full_name: 'Ho√†ng VƒÉn E', date_of_birth: '1988-11-25', gender: 'Nam', phone: '0905234567', email: 'citizen5@example.com', address: 'Th√¥n 4, X√£ Ho√†ng ƒê·ªìng', district: 'Dinh L·∫≠p', commune: 'Ho√†ng ƒê·ªìng', village: 'Th√¥n 4', household_members_data: JSON.stringify([{name: 'Ho√†ng VƒÉn H', relationship: 'Con', yearOfBirth: 2012}]), application_type: 'H·ªçc sinh ngh√®o', support_amount: 500000, status: 'pending', submitted_at: '2024-12-08', notes: 'M·ªõi n·ªôp h·ªì s∆°' },
  
  { code: 'APP00006', user_id: userIds[0], program_id: programIds[1], citizen_id: '123456789001', full_name: 'Nguy·ªÖn VƒÉn A', date_of_birth: '1985-03-15', gender: 'Nam', phone: '0901234567', email: 'citizen1@example.com', address: 'Th√¥n 1, X√£ Ho√†ng ƒê·ªìng', district: 'Dinh L·∫≠p', commune: 'Ho√†ng ƒê·ªìng', village: 'Th√¥n 1', household_members_data: JSON.stringify([{name: 'Nguy·ªÖn VƒÉn A', relationship: 'Ch·ªß h·ªô', yearOfBirth: 1985}]), application_type: 'H·ªô ngh√®o', support_amount: 350000, status: 'rejected', submitted_at: '2024-09-01', rejected_at: '2024-09-10', rejection_reason: 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán theo quy ƒë·ªãnh', notes: 'Thu nh·∫≠p v∆∞·ª£t ng∆∞·ª°ng ngh√®o' },
];

const applicationIds = [];
applications.forEach(app => {
  const id = insertData('applications', app);
  applicationIds.push(id);
  console.log(`  ‚úì T·∫°o h·ªì s∆°: ${app.code} - ${app.full_name} (${app.status})`);
});

// 4. Seed Application History
console.log('\nüìú T·∫°o l·ªãch s·ª≠ h·ªì s∆°...');
const histories = [
  { application_id: applicationIds[0], action: 'T·∫°o h·ªì s∆°', new_status: 'pending', performed_by: userIds[0], comment: 'N·ªôp h·ªì s∆° xin tr·ª£ c·∫•p' },
  { application_id: applicationIds[0], action: 'Duy·ªát h·ªì s∆°', old_status: 'pending', new_status: 'approved', performed_by: userIds[5], comment: 'ƒê·ªß ƒëi·ªÅu ki·ªán, ph√™ duy·ªát' },
  
  { application_id: applicationIds[1], action: 'T·∫°o h·ªì s∆°', new_status: 'pending', performed_by: userIds[1], comment: 'N·ªôp h·ªì s∆° xin tr·ª£ c·∫•p' },
  { application_id: applicationIds[1], action: 'Duy·ªát h·ªì s∆°', old_status: 'pending', new_status: 'approved', performed_by: userIds[5], comment: 'X√°c nh·∫≠n h·ªô ngh√®o' },
  
  { application_id: applicationIds[2], action: 'T·∫°o h·ªì s∆°', new_status: 'pending', performed_by: userIds[2], comment: 'N·ªôp h·ªì s∆° xin tr·ª£ c·∫•p' },
  { application_id: applicationIds[2], action: 'Xem x√©t', old_status: 'pending', new_status: 'under_review', performed_by: userIds[6], comment: 'ƒêang x√°c minh th√¥ng tin' },
  
  { application_id: applicationIds[5], action: 'T·∫°o h·ªì s∆°', new_status: 'pending', performed_by: userIds[0], comment: 'N·ªôp h·ªì s∆° xin tr·ª£ c·∫•p' },
  { application_id: applicationIds[5], action: 'T·ª´ ch·ªëi', old_status: 'pending', new_status: 'rejected', performed_by: userIds[5], comment: 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán' },
];

histories.forEach(history => {
  insertData('application_history', history);
});
console.log(`  ‚úì T·∫°o ${histories.length} b·∫£n ghi l·ªãch s·ª≠`);

// 5. Seed Payouts
console.log('\nüí∞ T·∫°o ƒë·ª£t chi tr·∫£...');
const payouts = [
  { batch_code: 'BATCH001', period: '11/2024', total_amount: 890000, total_recipients: 2, status: 'completed', created_by: userIds[5], program_id: programIds[0], disbursed_at: '2024-11-25' },
  { batch_code: 'BATCH002', period: '12/2024', total_amount: 1050000, total_recipients: 2, status: 'pending', created_by: userIds[6], program_id: programIds[2] },
];

const payoutIds = [];
payouts.forEach(payout => {
  const id = insertData('payouts', payout);
  payoutIds.push(id);
  console.log(`  ‚úì T·∫°o ƒë·ª£t chi tr·∫£: ${payout.batch_code} - ${payout.status}`);
});

// 6. Seed Payout Items
console.log('\nüíµ T·∫°o chi ti·∫øt chi tr·∫£...');
const payoutItems = [
  { payout_id: payoutIds[0], application_id: applicationIds[0], amount: 540000, status: 'paid', beneficiary_name: 'Nguy·ªÖn VƒÉn A', citizen_id: '123456789001', payment_method: 'bank_transfer', paid_at: '2024-11-25' },
  { payout_id: payoutIds[0], application_id: applicationIds[1], amount: 350000, status: 'paid', beneficiary_name: 'Tr·∫ßn Th·ªã B', citizen_id: '123456789002', payment_method: 'cash', paid_at: '2024-11-25' },
  
  { payout_id: payoutIds[1], application_id: applicationIds[2], amount: 600000, status: 'pending', beneficiary_name: 'L√™ VƒÉn C', citizen_id: '123456789003' },
  { payout_id: payoutIds[1], application_id: applicationIds[3], amount: 450000, status: 'pending', beneficiary_name: 'Ph·∫°m Th·ªã D', citizen_id: '123456789004' },
];

payoutItems.forEach(item => {
  insertData('payout_items', item);
});
console.log(`  ‚úì T·∫°o ${payoutItems.length} m·ª•c chi tr·∫£`);

// 7. Seed Notifications
console.log('\nüîî T·∫°o th√¥ng b√°o...');
const notifications = [
  { user_id: userIds[0], title: 'H·ªì s∆° ƒë∆∞·ª£c ph√™ duy·ªát', message: 'H·ªì s∆° APP00001 c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát', type: 'application_approved', is_read: 1 },
  { user_id: userIds[0], title: 'Khi·∫øu n·∫°i ƒë∆∞·ª£c gi·∫£i quy·∫øt', message: 'Khi·∫øu n·∫°i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt', type: 'complaint_resolved', is_read: 1 },
  { user_id: userIds[1], title: 'H·ªì s∆° ƒë∆∞·ª£c ph√™ duy·ªát', message: 'H·ªì s∆° APP00002 c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát', type: 'application_approved', is_read: 0 },
  { user_id: userIds[2], title: 'H·ªì s∆° ƒëang xem x√©t', message: 'H·ªì s∆° APP00003 ƒëang ƒë∆∞·ª£c xem x√©t', type: 'application_updated', is_read: 0 },
  { user_id: userIds[4], title: 'H·ªì s∆° ƒë√£ ti·∫øp nh·∫≠n', message: 'H·ªì s∆° APP00005 ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n', type: 'application_received', is_read: 0 },
];

notifications.forEach(notif => {
  insertData('notifications', notif);
});
console.log(`  ‚úì T·∫°o ${notifications.length} th√¥ng b√°o`);

console.log('\n‚úÖ Ho√†n t·∫•t seed d·ªØ li·ªáu!\n');
console.log('üìà T·ªïng k·∫øt:');
console.log(`  - ${users.length} users`);
console.log(`  - ${programs.length} ch∆∞∆°ng tr√¨nh h·ªó tr·ª£`);
console.log(`  - ${applications.length} h·ªì s∆°`);
console.log(`  - ${payouts.length} ƒë·ª£t chi tr·∫£`);
console.log(`  - ${notifications.length} th√¥ng b√°o`);
console.log('\nüéâ D·ªØ li·ªáu m·∫´u ƒë√£ s·∫µn s√†ng ƒë·ªÉ test!');

db.close();
